Wood_Data_Im <- Wood_Data_Im %>% distinct()
}
# Check if numbers of entries for each year match (i.e. for every year there should be the same number of rows)
# Preallocate a vector and count all the occurrences belonging to a year
years <- unique(Wood_Data_Im$Year) %>% sort(decreasing = FALSE)
occ_years <- rep(NA, length(years))
for (i in 1:length(years)) {
occ_years[i] <- length(which(Wood_Data_Im$Year == years[i]))
}
# If not all the years have the same number of rows
if (length(unique(occ_years)) != 1) {
# Select the year with the fewest columns
t <- years[which.min(occ_years)]
# Find the index of the individual tree that is missing a row
for (i in 1:length(Wood_Data_Im$Year)) {
if (Wood_Data_Im$Year[i] == t + 1) {
if (Wood_Data_Im$Year[i - 1] != t) {
index <- i
}
}
}
}
# Delete the rows of the individual with the missing entry
# Calculate the number of rows that need to be deleted
del_rows <- max(years) - min(years) - 1
# Delete the rows
Wood_Data_Im <- Wood_Data_Im[-1 * seq(i, i + del_rows), ]
# There are many typos in the dataset. With the delete function the user can
# specify the minimum ring width (mm) and the minimum stem diameter (cm) that
# the individual trees are required to have
Wood_Data_Im <- Delete(Wood_Data_Im, 0.05, 0)
# Store the names of the species
Species_names <- unique(Wood_Data_Im$Species)
# Add two columns to the data to store the growth rate for the ring width and the stem diameter
Wood_Data_Growth_Rate <-
cbind(Wood_Data_Im, matrix(nrow = dim(Wood_Data_Im)[1], ncol =  2))
colnames(Wood_Data_Growth_Rate) <-
c(colnames(Wood_Data_Im), "GrowthRateRing", "GrowthRateStem")
# Calculate the growth rate of the ring width and the stem diameter by looping over the whole data frame
for (i in 1:dim(Wood_Data_Growth_Rate)[1]) {
# The first year does not have a previous year for reference
if (Wood_Data_Growth_Rate$Year[i] == min(Wood_Data_Growth_Rate$Year)) {
Wood_Data_Growth_Rate$GrowthRateRing[i] = 0
Wood_Data_Growth_Rate$GrowthRateStem[i] = 0
} else{
# Calculate the growth rate by: (MeasurementCurrentYear - MeasurementYearBefore) / |MeasurementYearBefore|
# Store the result in the data frame in the two added columns
Wood_Data_Growth_Rate$GrowthRateRing[i] = (
Wood_Data_Growth_Rate$Ring.width..mm.[i] -  Wood_Data_Growth_Rate$Ring.width..mm.[i - 1]
) / abs(Wood_Data_Growth_Rate$Ring.width..mm.[i - 1])
Wood_Data_Growth_Rate$GrowthRateStem[i] = (
Wood_Data_Growth_Rate$Stem.diameter..cm.[i] - Wood_Data_Growth_Rate$Stem.diameter..cm.[i - 1]
) / abs(Wood_Data_Growth_Rate$Stem.diameter..cm.[i - 1])
}
}
# Select a threshold for the Latitude (I chose the median) that is used to divide the data in two categroies (one below and one above the threshold)
latitude_treshold <- round(median(Wood_Data_Growth_Rate$Latitude))
# Condition for separating the data
con <-  Wood_Data_Growth_Rate$Latitude >= latitude_treshold
# Calculates the average of all individuals per species per year that fulfill the condition (i.e. returns a matrix with rows = number of years and col = number of species
# and the rows contain the average growth rate in that year of individuals of the different species that fulfill the condition (here latitude < 40))
Ring_Growth_Lat_over_40 <-
Calculate_Growth(Wood_Data_Growth_Rate, con, Species_names)
Ring_Growth_Lat_over_40
# Setting the path for the working directory (Needs to be adjusted)
setwd(
"/Users/lukas/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project"
)
# Require needed packages
require("tidyverse")
require("ggpubr")
library("ggplot2")
library("dplyr")
# Source the lib file for accessing functions
source("lib.R")
# Read in the data
WoodData <-
read.csv(
"sample_tree_growth_data_with_locations.csv",
stringsAsFactors = F
)
# Checking for NA
if (length(which(is.na(WoodData))) != 0) {
print("NAs found")
NA_index <- which(is.na(WoodData))
}
# Data overview
str(WoodData)
# Extract the important data for the project (ID, Secies, Year, Latitude, Elevation, Ring width, Stem diameter)
# Sort the data according to the tree ID and the year
Wood_Data_Im <-
select(
WoodData,
Sample.tree.ID,
Species,
Year,
Latitude,
Elevation..m.,
Ring.width..mm.,
Stem.diameter..cm.
) %>%
arrange(Sample.tree.ID, Year)
# Check for duplicated rows, if found delete duplicate rows
if (length(which(duplicated(Wood_Data_Im) == TRUE)) != 0) {
Wood_Data_Im <- Wood_Data_Im %>% distinct()
}
# Check if numbers of entries for each year match (i.e. for every year there should be the same number of rows)
# Preallocate a vector and count all the occurrences belonging to a year
years <- unique(Wood_Data_Im$Year) %>% sort(decreasing = FALSE)
occ_years <- rep(NA, length(years))
for (i in 1:length(years)) {
occ_years[i] <- length(which(Wood_Data_Im$Year == years[i]))
}
# If not all the years have the same number of rows
if (length(unique(occ_years)) != 1) {
# Select the year with the fewest columns
t <- years[which.min(occ_years)]
# Find the index of the individual tree that is missing a row
for (i in 1:length(Wood_Data_Im$Year)) {
if (Wood_Data_Im$Year[i] == t + 1) {
if (Wood_Data_Im$Year[i - 1] != t) {
index <- i
}
}
}
}
# Delete the rows of the individual with the missing entry
# Calculate the number of rows that need to be deleted
del_rows <- max(years) - min(years) - 1
# Delete the rows
Wood_Data_Im <- Wood_Data_Im[-1 * seq(i, i + del_rows), ]
# There are many typos in the dataset. With the delete function the user can
# specify the minimum ring width (mm) and the minimum stem diameter (cm) that
# the individual trees are required to have
Wood_Data_Im <- Delete(Wood_Data_Im, 0.05, 0)
# Store the names of the species
Species_names <- unique(Wood_Data_Im$Species)
# Add two columns to the data to store the growth rate for the ring width and the stem diameter
Wood_Data_Growth_Rate <-
cbind(Wood_Data_Im, matrix(nrow = dim(Wood_Data_Im)[1], ncol =  2))
colnames(Wood_Data_Growth_Rate) <-
c(colnames(Wood_Data_Im), "GrowthRateRing", "GrowthRateStem")
# Calculate the growth rate of the ring width and the stem diameter by looping over the whole data frame
for (i in 1:dim(Wood_Data_Growth_Rate)[1]) {
# The first year does not have a previous year for reference
if (Wood_Data_Growth_Rate$Year[i] == min(Wood_Data_Growth_Rate$Year)) {
Wood_Data_Growth_Rate$GrowthRateRing[i] = 0
Wood_Data_Growth_Rate$GrowthRateStem[i] = 0
} else{
# Calculate the growth rate by: (MeasurementCurrentYear - MeasurementYearBefore) / |MeasurementYearBefore|
# Store the result in the data frame in the two added columns
Wood_Data_Growth_Rate$GrowthRateRing[i] = (
Wood_Data_Growth_Rate$Ring.width..mm.[i] -  Wood_Data_Growth_Rate$Ring.width..mm.[i - 1]
) / abs(Wood_Data_Growth_Rate$Ring.width..mm.[i - 1])
Wood_Data_Growth_Rate$GrowthRateStem[i] = (
Wood_Data_Growth_Rate$Stem.diameter..cm.[i] - Wood_Data_Growth_Rate$Stem.diameter..cm.[i - 1]
) / abs(Wood_Data_Growth_Rate$Stem.diameter..cm.[i - 1])
}
}
# Select a threshold for the Latitude (I chose the median) that is used to divide the data in two categroies (one below and one above the threshold)
latitude_treshold <- round(median(Wood_Data_Growth_Rate$Latitude))
# Condition for separating the data
con <-  Wood_Data_Growth_Rate$Latitude >= latitude_treshold
# Calculates the average of all individuals per species per year that fulfill the condition (i.e. returns a matrix with rows = number of years and col = number of species
# and the rows contain the average growth rate in that year of individuals of the different species that fulfill the condition (here latitude < 40))
Ring_Growth_Lat_over_40 <-
Calculate_Growth(Wood_Data_Growth_Rate, con, Species_names)
Ring_Growth_Lat_over_40
which(is.nan(Ring_Growth_Lat_over_40 ))
96 / dim(Ring_Growth_Lat_over_40)[1]
View(Ring_Growth_Lat_over_40)
19 * 2
19*3
19*4
19*5
round(96 / dim(Ring_Growth_Lat_over_40)[1])
ceiling(96 / dim(Ring_Growth_Lat_over_40)[1])
Ring_Growth_Lat_over_40 <- Ring_Growth_Lat_over_40[, -6]
View(Ring_Growth_Lat_over_40)
# Setting the path for the working directory (Needs to be adjusted)
setwd(
"/Users/lukas/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project"
)
# Require needed packages
require("tidyverse")
require("ggpubr")
library("ggplot2")
library("dplyr")
# Source the lib file for accessing functions
source("lib.R")
# Read in the data
WoodData <-
read.csv(
"sample_tree_growth_data_with_locations.csv",
stringsAsFactors = F
)
# Checking for NA
if (length(which(is.na(WoodData))) != 0) {
print("NAs found")
NA_index <- which(is.na(WoodData))
}
# Data overview
str(WoodData)
# Extract the important data for the project (ID, Secies, Year, Latitude, Elevation, Ring width, Stem diameter)
# Sort the data according to the tree ID and the year
Wood_Data_Im <-
select(
WoodData,
Sample.tree.ID,
Species,
Year,
Latitude,
Elevation..m.,
Ring.width..mm.,
Stem.diameter..cm.
) %>%
arrange(Sample.tree.ID, Year)
# Check for duplicated rows, if found delete duplicate rows
if (length(which(duplicated(Wood_Data_Im) == TRUE)) != 0) {
Wood_Data_Im <- Wood_Data_Im %>% distinct()
}
# Check if numbers of entries for each year match (i.e. for every year there should be the same number of rows)
# Preallocate a vector and count all the occurrences belonging to a year
years <- unique(Wood_Data_Im$Year) %>% sort(decreasing = FALSE)
occ_years <- rep(NA, length(years))
for (i in 1:length(years)) {
occ_years[i] <- length(which(Wood_Data_Im$Year == years[i]))
}
# If not all the years have the same number of rows
if (length(unique(occ_years)) != 1) {
# Select the year with the fewest columns
t <- years[which.min(occ_years)]
# Find the index of the individual tree that is missing a row
for (i in 1:length(Wood_Data_Im$Year)) {
if (Wood_Data_Im$Year[i] == t + 1) {
if (Wood_Data_Im$Year[i - 1] != t) {
index <- i
}
}
}
}
# Delete the rows of the individual with the missing entry
# Calculate the number of rows that need to be deleted
del_rows <- max(years) - min(years) - 1
# Delete the rows
Wood_Data_Im <- Wood_Data_Im[-1 * seq(i, i + del_rows), ]
# There are many typos in the dataset. With the delete function the user can
# specify the minimum ring width (mm) and the minimum stem diameter (cm) that
# the individual trees are required to have
Wood_Data_Im <- Delete(Wood_Data_Im, 0.05, 0)
# Store the names of the species
Species_names <- unique(Wood_Data_Im$Species)
# Add two columns to the data to store the growth rate for the ring width and the stem diameter
Wood_Data_Growth_Rate <-
cbind(Wood_Data_Im, matrix(nrow = dim(Wood_Data_Im)[1], ncol =  2))
colnames(Wood_Data_Growth_Rate) <-
c(colnames(Wood_Data_Im), "GrowthRateRing", "GrowthRateStem")
# Calculate the growth rate of the ring width and the stem diameter by looping over the whole data frame
for (i in 1:dim(Wood_Data_Growth_Rate)[1]) {
# The first year does not have a previous year for reference
if (Wood_Data_Growth_Rate$Year[i] == min(Wood_Data_Growth_Rate$Year)) {
Wood_Data_Growth_Rate$GrowthRateRing[i] = 0
Wood_Data_Growth_Rate$GrowthRateStem[i] = 0
} else{
# Calculate the growth rate by: (MeasurementCurrentYear - MeasurementYearBefore) / |MeasurementYearBefore|
# Store the result in the data frame in the two added columns
Wood_Data_Growth_Rate$GrowthRateRing[i] = (
Wood_Data_Growth_Rate$Ring.width..mm.[i] -  Wood_Data_Growth_Rate$Ring.width..mm.[i - 1]
) / abs(Wood_Data_Growth_Rate$Ring.width..mm.[i - 1])
Wood_Data_Growth_Rate$GrowthRateStem[i] = (
Wood_Data_Growth_Rate$Stem.diameter..cm.[i] - Wood_Data_Growth_Rate$Stem.diameter..cm.[i - 1]
) / abs(Wood_Data_Growth_Rate$Stem.diameter..cm.[i - 1])
}
}
# Select a threshold for the Latitude (I chose the median) that is used to divide the data in two categroies (one below and one above the threshold)
latitude_treshold <- round(median(Wood_Data_Growth_Rate$Latitude))
# Condition for separating the data
con <-  Wood_Data_Growth_Rate$Latitude >= latitude_treshold
# Calculates the average of all individuals per species per year that fulfill the condition (i.e. returns a matrix with rows = number of years and col = number of species
# and the rows contain the average growth rate in that year of individuals of the different species that fulfill the condition (here latitude < 40))
Ring_Growth_Lat_over_40 <-
Calculate_Growth(Wood_Data_Growth_Rate, con, Species_names)
# Condition for separating the data
con <-  Wood_Data_Growth_Rate$Latitude < latitude_treshold
# Calculates the average of all individuals per species per year that fulfill the condition
Ring_Growth_Lat_under_40 <-
Calculate_Growth(Wood_Data_Growth_Rate, con, Species_names)
View(Ring_Growth_Lat_over_40)
View(Ring_Growth_Lat_under_40)
# First plot for fulfilling the first condition (growth rate of trees below the threshold)
p_ring_under_40 <-
ggplot(data.frame(Ring_Growth_Lat_under_40), aes(x = Year)) +
geom_line(aes(y = Ring_Growth_Lat_under_40[, 2], color = colnames(Ring_Growth_Lat_under_40)[2])) +
geom_line(aes(y = Ring_Growth_Lat_under_40[, 3], color = colnames(Ring_Growth_Lat_under_40)[3])) +
geom_line(aes(y = Ring_Growth_Lat_under_40[, 4], color = colnames(Ring_Growth_Lat_under_40)[4])) +
geom_line(aes(y = Ring_Growth_Lat_under_40[, 5], color = colnames(Ring_Growth_Lat_under_40)[5])) +
scale_color_discrete(name = "Species") +
ggtitle("Ring Growth Rate compared by year \n in the South") +
xlab("Year") + ylab("Ring Width Increase") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Second plot for fulfilling the second condition (growth rate of trees above the threshold)
p_ring_over_40 <-
ggplot(data.frame(Ring_Growth_Lat_over_40), aes(x = Year)) +
geom_line(aes(y = Ring_Growth_Lat_over_40[, 2], color = colnames(Ring_Growth_Lat_over_40)[2])) +
geom_line(aes(y = Ring_Growth_Lat_over_40[, 3], color = colnames(Ring_Growth_Lat_over_40)[3])) +
geom_line(aes(y = Ring_Growth_Lat_over_40[, 4], color = colnames(Ring_Growth_Lat_over_40)[4])) +
geom_line(aes(y = Ring_Growth_Lat_over_40[, 5], color = colnames(Ring_Growth_Lat_over_40)[5])) +
geom_line(aes(y = Ring_Growth_Lat_over_40[, 6], color = colnames(Ring_Growth_Lat_over_40)[6])) +
scale_color_discrete(name = "Species") +
ggtitle("Ring Growth Rate compared by year \n in the North") +
xlab("Year") + ylab("Ring Width Increase") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Arrange the two plots in one figure
figure_ring_latitude <- ggarrange(
p_ring_under_40,
p_ring_over_40,
labels = c("A", "B"),
ncol = 2,
nrow = 1
)
# Show the figure
figure_ring_latitude
# Select a threshold for the Latitude (I chose the median) that is used to divide the data in two categroies (one below and one above the threshold)
latitude_treshold <- round(median(Wood_Data_Growth_Rate$Latitude))
# Condition for separating the data
con <-  Wood_Data_Growth_Rate$Latitude >= latitude_treshold
# Calculates the average of all individuals per species per year that fulfill the condition (i.e. returns a matrix with rows = number of years and col = number of species
# and the rows contain the average growth rate in that year of individuals of the different species that fulfill the condition (here latitude < 40))
Ring_Growth_Lat_over_40 <-
Calculate_Growth(Wood_Data_Growth_Rate, con, Species_names)
# Condition for separating the data
con <-  Wood_Data_Growth_Rate$Latitude < latitude_treshold
# Calculates the average of all individuals per species per year that fulfill the condition
Ring_Growth_Lat_under_40 <-
Calculate_Growth(Wood_Data_Growth_Rate, con, Species_names)
# First plot for fulfilling the first condition (growth rate of trees below the threshold)
p_ring_under_40 <-
ggplot(data.frame(Ring_Growth_Lat_under_40), aes(x = Year)) +
geom_line(aes(y = Ring_Growth_Lat_under_40[, 2], color = colnames(Ring_Growth_Lat_under_40)[2])) +
geom_line(aes(y = Ring_Growth_Lat_under_40[, 3], color = colnames(Ring_Growth_Lat_under_40)[3])) +
geom_line(aes(y = Ring_Growth_Lat_under_40[, 4], color = colnames(Ring_Growth_Lat_under_40)[4])) +
geom_line(aes(y = Ring_Growth_Lat_under_40[, 5], color = colnames(Ring_Growth_Lat_under_40)[5])) +
geom_line(aes(y = Ring_Growth_Lat_under_40[, 6], color = colnames(Ring_Growth_Lat_under_40)[6])) +
scale_color_discrete(name = "Species") +
ggtitle("Ring Growth Rate compared by year \n in the South") +
xlab("Year") + ylab("Ring Width Increase") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Second plot for fulfilling the second condition (growth rate of trees above the threshold)
p_ring_over_40 <-
ggplot(data.frame(Ring_Growth_Lat_over_40), aes(x = Year)) +
geom_line(aes(y = Ring_Growth_Lat_over_40[, 2], color = colnames(Ring_Growth_Lat_over_40)[2])) +
geom_line(aes(y = Ring_Growth_Lat_over_40[, 3], color = colnames(Ring_Growth_Lat_over_40)[3])) +
geom_line(aes(y = Ring_Growth_Lat_over_40[, 4], color = colnames(Ring_Growth_Lat_over_40)[4])) +
geom_line(aes(y = Ring_Growth_Lat_over_40[, 5], color = colnames(Ring_Growth_Lat_over_40)[5])) +
scale_color_discrete(name = "Species") +
ggtitle("Ring Growth Rate compared by year \n in the North") +
xlab("Year") + ylab("Ring Width Increase") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Arrange the two plots in one figure
figure_ring_latitude <- ggarrange(
p_ring_under_40,
p_ring_over_40,
labels = c("A", "B"),
ncol = 2,
nrow = 1
)
# Show the figure
figure_ring_latitude
# Select a threshold for the Latitude (I chose the median) that is used to divide the data in two categroies (one below and one above the threshold)
latitude_treshold <- round(median(Wood_Data_Growth_Rate$Latitude))
# Condition for separating the data
con <-  Wood_Data_Growth_Rate$Latitude >= latitude_treshold
# Calculates the average of all individuals per species per year that fulfill the condition
Stem_Growth_Lat_over_40 <-
Calculate_Growth_Stem(Wood_Data_Growth_Rate, con, Species_names)
# Condition for separating the data
con <-  Wood_Data_Growth_Rate$Latitude < latitude_treshold
# Calculates the average of all individuals per species per year that fulfill the condition
Stem_Growth_Lat_under_40 <-
Calculate_Growth_Stem(Wood_Data_Growth_Rate, con, Species_names)
# First plot for fulfilling the first condition (growth rate of trees below the threshold)
p_stem_under_40 <-
ggplot(data.frame(Stem_Growth_Lat_under_40), aes(x = Year)) +
geom_line(aes(y = Stem_Growth_Lat_under_40[, 2], color = colnames(Stem_Growth_Lat_under_40)[2])) +
geom_line(aes(y = Stem_Growth_Lat_under_40[, 3], color = colnames(Stem_Growth_Lat_under_40)[3])) +
geom_line(aes(y = Stem_Growth_Lat_under_40[, 4], color = colnames(Stem_Growth_Lat_under_40)[4])) +
geom_line(aes(y = Stem_Growth_Lat_under_40[, 5], color = colnames(Stem_Growth_Lat_under_40)[5])) +
geom_line(aes(y = Stem_Growth_Lat_under_40[, 6], color = colnames(Stem_Growth_Lat_under_40)[6])) +
scale_color_discrete(name = "Species") +
ggtitle("Stem Growth Rate compared by year \n in the South") +
xlab("Year") + ylab("Stem Diameter Increase") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Second plot for fulfilling the second condition (growth rate of trees above the threshold)
p_stem_over_40 <-
ggplot(data.frame(Stem_Growth_Lat_over_40), aes(x = Year)) +
geom_line(aes(y = Stem_Growth_Lat_over_40[, 2], color = colnames(Stem_Growth_Lat_over_40)[2])) +
geom_line(aes(y = Stem_Growth_Lat_over_40[, 3], color = colnames(Stem_Growth_Lat_over_40)[3])) +
geom_line(aes(y = Stem_Growth_Lat_over_40[, 4], color = colnames(Stem_Growth_Lat_over_40)[4])) +
geom_line(aes(y = Stem_Growth_Lat_over_40[, 5], color = colnames(Stem_Growth_Lat_over_40)[5])) +
scale_color_discrete(name = "Species") +
ggtitle("Stem Growth Rate compared by year \n in the North") +
xlab("Year") + ylab("Stem Diameter Increase") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Arrange the two plots in one figure
figure_stem_latitude <- ggarrange(
p_stem_under_40,
p_stem_over_40,
labels = c("A", "B"),
ncol = 2,
nrow = 1
)
# Show the figure
figure_stem_latitude
# Setting the path for the working directory (Needs to be adjusted)
setwd(
"/Users/lukas/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project"
)
source('~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project/Buecherl_FinalProject.R')
# Show the figure
figure_ring_latitude
# Show the figure
figure_ring_elevation
# Show the figure
figure_stem_latitude
View(Wood_Data_Growth_Rate)
max(Wood_Data_Im$Elevation..m.)
3600 / 3
source('~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project/Buecherl_FinalProject.R')
View(Ring_Growth_Ele_over_2000)
View(Ring_Growth_Ele_over_3000)
View(Ring_Growth_Ele_under_2000)
source('~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project/Buecherl_FinalProject.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project/Buecherl_FinalProject.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project/Buecherl_FinalProject.R')
# Run commands to show the figures
figure_ring_latitude
figure_ring_elevation
figure_stem_latitude
figure_stem_elevation
source('~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project/Buecherl_FinalProject.R')
# Clear Environment
rm(list = ls())
source('~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project/Buecherl_FinalProject.R')
# Run commands to show the figures
figure_ring_latitude
figure_ring_elevation
figure_stem_latitude
figure_stem_elevation
# Colorado Data By County.  Each file has different headers potentially
rm(list = ls())
source('~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Datasets/COVID-19/CDPHE_Data/CDPHE_Data_Portal/ByCountyOfID/ParseAndAggregateCountyData.R')
max_gap
index
aggregatedData$datesParsed[6912]
max_gap
# Third plot for fulfilling the second condition (growth rate of trees above the max threshold)
p_stem_over_3000 <-
ggplot(data.frame(Stem_Growth_Ele_over_3000), aes(x = Year, y = Stem_Growth_Ele_over_3000[, 2:6])) +
#geom_line(aes(y = Stem_Growth_Ele_over_3000[, 2], color = colnames(Stem_Growth_Ele_over_3000)[2])) +
#geom_line(aes(y = Stem_Growth_Ele_over_3000[, 3], color = colnames(Stem_Growth_Ele_over_3000)[3])) +
#geom_line(aes(y = Stem_Growth_Ele_over_3000[, 4], color = colnames(Stem_Growth_Ele_over_3000)[4])) +
#geom_line(aes(y = Stem_Growth_Ele_over_3000[, 5], color = colnames(Stem_Growth_Ele_over_3000)[5])) +
#geom_line(aes(y = Stem_Growth_Ele_over_3000[, 6], color = colnames(Stem_Growth_Ele_over_3000)[6])) +
scale_color_discrete(name = "Species") +
ggtitle(sprintf("Stem Growth Rate compared by year \n over %s m",max_treshold_elevation)) +
xlab("Year") + ylab("Stem Diameter Increase") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
source('~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project/Buecherl_FinalProject.R')
# Third plot for fulfilling the second condition (growth rate of trees above the max threshold)
p_stem_over_3000 <-
ggplot(data.frame(Stem_Growth_Ele_over_3000), aes(x = Year)) +
geom_line(aes(y = Stem_Growth_Ele_over_3000[, 2], color = colnames(Stem_Growth_Ele_over_3000)[2])) +
geom_line(aes(y = Stem_Growth_Ele_over_3000[, 3], color = colnames(Stem_Growth_Ele_over_3000)[3])) +
geom_line(aes(y = Stem_Growth_Ele_over_3000[, 4], color = colnames(Stem_Growth_Ele_over_3000)[4])) +
geom_line(aes(y = Stem_Growth_Ele_over_3000[, 5], color = colnames(Stem_Growth_Ele_over_3000)[5])) +
geom_line(aes(y = Stem_Growth_Ele_over_3000[, 6], color = colnames(Stem_Growth_Ele_over_3000)[6])) +
scale_color_discrete(name = "Species") +
ggtitle(sprintf("Stem Growth Rate compared by year \n over %s m",max_treshold_elevation)) +
xlab("Year") + ylab("Stem Diameter Increase") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p_stem_over_3000
ggplot(data.frame(Stem_Growth_Ele_over_3000), aes(x = Year)) + geom_line()
source('~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project/Buecherl_FinalProject.R')
# Run commands to show the figures
figure_ring_latitude
figure_ring_elevation
figure_stem_latitude
figure_stem_elevation
# Clear Environment
rm(list = ls())
source('~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project/Buecherl_FinalProject.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project/Buecherl_FinalProject.R')
# Run commands to show the figures
figure_ring_latitude
figure_ring_elevation
figure_stem_latitude
figure_stem_elevation
source('~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project/Buecherl_FinalProject.R')
# Run commands to show the figures
figure_ring_latitude
figure_ring_elevation
figure_stem_latitude
figure_stem_elevation
source('~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Final_Project/Buecherl_FinalProject.R')
