summary(Hg.wac.lm)
# Combined model
Hg.river.w.lm = lm(HG_conc_ppm, ~ river+ weight_g, data=fishHG)
summary(Hg.river.w.lm)
# Combined model
Hg.river.w.lm = lm(HG_conc_ppm ~ river+weight_g, data=fishHG)
summary(Hg.river.w.lm)
fishHG <- read.csv("~/Desktop/fishHG.txt", sep="", stringsAsFactors=TRUE)
View(fishHG)
View(fishHG)
attach(fishHG)
hist(HG_conc_ppm)
hist(fishHG[category == "river")
hist(fishHG[category == "river"])
hist(fishHG[river == "lumber"])
help hist
doc hist
help hist
hist(fishHG[river == "lumber", "HG_conc_ppm"])
temp = fishHG[river == "lumber", "HG_conc_ppm"]
par(mfrow=c(1,2))
temp
length(temp)
hist(fishHG[river == "lumber", "HG_conc_ppm"])
hist(fishHG[river == "wacamaw", "HG_conc_ppm"])
temp = fishHG[river == "wacamaw", "HG_conc_ppm"]
temp
par(mfrow=c(1,2))
hist(fishHG[river == "lumber", "HG_conc_ppm"], xlim=c(0, 4.0), ylim=c(0, 35), xlab = "HG_conc_ppm", main = "Lumber", freq = FALSE )
hist(fishHG[river == "wacamaw", "HG_conc_ppm"], xlim=c(0, 4.0), ylim=c(0, 35), xlab = "HG_conc_ppm", main = "Wacamaw", freq = FALSE ) )
hist(fishHG[category == "International"], xlim=c(0,1.5), ylim=c(0, 10), xlab = "Charity fund_eff", main = "International", freq = FALSE, nclass = 30);
par(mfrow=c(1,2))
hist(fishHG[river == "lumber", "HG_conc_ppm"], xlim=c(0, 4.0), ylim=c(0, 35), xlab = "HG_conc_ppm", main = "Lumber", freq = FALSE )
hist(fishHG[river == "wacamaw", "HG_conc_ppm"], xlim=c(0, 4.0), ylim=c(0, 35), xlab = "HG_conc_ppm", main = "Wacamaw", freq = FALSE ) )
hist(fishHG[river == "wacamaw", "HG_conc_ppm"], xlim=c(0, 4.0), ylim=c(0, 35), xlab = "HG_conc_ppm", main = "Wacamaw", freq = FALSE )
hist(fishHG[river == "lumber", "HG_conc_ppm"], xlim=c(0, 4.0), ylim=c(0, 5), xlab = "HG_conc_ppm", main = "Lumber", freq = FALSE )
hist(fishHG[river == "wacamaw", "HG_conc_ppm"], xlim=c(0, 4.0), ylim=c(0, 5), xlab = "HG_conc_ppm", main = "Wacamaw", freq = FALSE )
hist(fishHG[river == "lumber", "HG_conc_ppm"], xlim=c(0, 4.0), ylim=c(0, 1), xlab = "HG_conc_ppm", main = "Lumber", freq = FALSE )
hist(fishHG[river == "wacamaw", "HG_conc_ppm"], xlim=c(0, 4.0), ylim=c(0, 1), xlab = "HG_conc_ppm", main = "Wacamaw", freq = FALSE )
hist(fishHG[river == "lumber", "HG_conc_ppm"])
hist(fishHG[river == "lumber", "HG_conc_ppm"], xlim=c(0, 4.0), ylim=c(0, 1), xlab = "HG_conc_ppm", main = "Lumber", freq = FALSE )
par(mfrow=c(1,2))
hist(fishHG[river == "lumber", "HG_conc_ppm"], xlim=c(0, 4.0), ylim=c(0, 1), xlab = "HG_conc_ppm", main = "Lumber", freq = FALSE )
hist(fishHG[river == "wacamaw", "HG_conc_ppm"], xlim=c(0, 4.0), ylim=c(0, 1), xlab = "HG_conc_ppm", main = "Wacamaw", freq = FALSE )
var.test(fishHG[river == "lumber", "HG_conc_ppm"], fishHG[river == "wacamaw", "HG_conc_ppm"])
length(fishHG[river == "lumber", "HG_conc_ppm"]) # 610 international charities
length(fishHG[river == "wacamaw", "HG_conc_ppm"]) # 7798 national charities
t.test(fishHG[river == "lumber", "HG_conc_ppm"], fishHG[river == "wacamaw", "HG_conc_ppm"])
length(fishHG[river == "lumber", "HG_conc_ppm"]) # 610 international charities
length(fishHG[river == "wacamaw", "HG_conc_ppm"]) # 7798 national charities
var.test(fishHG[river == "lumber", "HG_conc_ppm"], fishHG[river == "wacamaw", "HG_conc_ppm"])
t.test(fishHG[river == "lumber", "HG_conc_ppm"], fishHG[river == "wacamaw", "HG_conc_ppm"])
temp = [river == "lumber", weight_g > 1000, "HG_conc_ppm"]]
temp = [river == "lumber", weight_g > 1000, "HG_conc_ppm"]
temp = [river == "lumber", weight_g > "1000", "HG_conc_ppm"]
temp = river == "lumber", weight_g > 1000, "HG_conc_ppm"
temp = [river == "lumber", "HG_conc_ppm"]
temp = [river == "lumber", "HG_conc_ppm"]
temp = fishHG[river == "lumber", "HG_conc_ppm"]
temp = fishHG[river == "lumber", weight_g > 1000, "HG_conc_ppm"]
temp = fishHG[river == "lumber", weight_g > 1000, "HG_conc_ppm"]
temp = fishHG[river == "lumber" && weight_g > 1000, "HG_conc_ppm"]
temp
length(temp)
temp = fishHG[river == "lumber" && weight_g > 1000, "HG_conc_ppm"]
temp
length(temp)
temp = fishHG[river == "lumber", weight_g > 1000, "HG_conc_ppm"]
temp = fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"]
temp
length(temp)
temp = fishHG[river == "wacamav" & weight_g > 1000, "HG_conc_ppm"]
temp
length(temp)
temp = fishHG[river == "wacamav" & weight_g > 1000, "HG_conc_ppm"]
temp
length(temp)
temp = fishHG[river == "wacamav" & weight_g > 1000, "HG_conc_ppm"]
temp = fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"]
temp
length(temp)
temp = fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"]
temp
length(temp)
var.test(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"], fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"])
var.test(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"], fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"])
length(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"]) # 73
length(fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"]) # 98
length(fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"]) # 40
t.test(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"], fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"],  var.equal = TRUE)
var.test(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"], fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"])
var.test(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"], fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"])
length(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"]) # 36
length(fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"]) # 40
t.test(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"], fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"],  var.equal = TRUE)
# Test for Nomality
ks.test(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"] , "pnorm", mean(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"]), sd(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"]))
# Test for Nomality
ks.test(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"] , "pnorm", mean(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"]), sd(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"]))
# Test for Nomality
ks.test(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"] , "pnorm", mean(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"]), sd(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"]))
ks.test(fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"], "pnorm", mean(fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"]), sd(fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"]))
# Test for Nomality
ks.test(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"] , "pnorm", mean(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"]), sd(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"]))
ks.test(fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"], "pnorm", mean(fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"]), sd(fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"]))
Diff = fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"] - fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"]
x = mean(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"])
x
y = mean(fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"])
y
s1 = sd(fishHG[river == "lumber" & weight_g > 1000, "HG_conc_ppm"])
s1
s2 = sd(fishHG[river == "wacamaw" & weight_g > 1000, "HG_conc_ppm"])
s2
t = qt(0.05/2, df = 72)
t
x - y
Hg.length.lm = lm(HG_conc_ppm ~ length_cm)
plot(length_cm, HG_conc_ppm, ylab="mercury (ppm)", xlab="length (cm)")
abline(Hg.length.lm, col=”red”, lw = 4))
abline(Hg.length.lm, col="red", lw = 4))
Hg.length.lm = lm(HG_conc_ppm ~ length_cm)
plot(length_cm, HG_conc_ppm, ylab="mercury (ppm)", xlab="length (cm)")
abline(Hg.length.lm, col="red", lw = 4)
summary(Hg.length.lm)
Hg.length.lm = lm(HG_conc_ppm ~ length_cm)
plot(length_cm, HG_conc_ppm, ylab="Mercury (ppm)", xlab="Length (cm)")
abline(Hg.length.lm, col="red", lw = 4)
summary(Hg.length.lm)
# Problem d)
Hg.length.50cm.fit = predict(Hg.length.lm, newdata = data.frame(length_cm = 50), interval = "conf", level = 0.95)
Hg.length.50cm.fit
# Problem f)
Hg.length.50cm.pre = predict(Hg.length.lm, newdata = data.frame(length_cm = 50), interval = "pred", level = 0.95)
Hg.length.50cm.pre
Hg.length.lm = lm(HG_conc_ppm ~ length_cm)
plot(length_cm, HG_conc_ppm, ylab="Mercury (ppm)", xlab="Length (cm)")
abline(Hg.length.lm, col="red", lw = 4)
summary(Hg.length.lm)
# Problem d)
Hg.length.50cm.conf = predict(Hg.length.lm, newdata = data.frame(length_cm = 50), interval = "conf", level = 0.95)
# Problem f)
Hg.length.50cm.pre = predict(Hg.length.lm, newdata = data.frame(length_cm = 50), interval = "pred", level = 0.95)
Hg.length.50cm.conf
Hg.length.50cm.pre
R.version.string
clear
clear()
x <- 1
y <- 5
x + y
z <- x + y
install.packages("swirl")
library("swirl")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 1000)
z * 2 + 1000
my_div
# Lab step #3: Total number of Chips, total number of guests
num_bags_chips <- 5
num_guest <- 8
# Lab step #5: Average bags of Chips eaten by Guest
exp_aver_chips <- 0.4
# Lab step #7: Expected Amount of leftover chips (host eats 0.4 bag of chips too)
exp_chips_left <- num_bags_chips - (num_guest + 1) * exp_aver_chips
# Part 2: Practice with Objects and Built-in functions
#  Lab step #8: Rankings of the Star Wars Movies in order
self_rating <- c(7, 9, 8, 1, 2, 3, 4, 6, 5)
penny_rating <- c(5, 9, 8, 3, 1, 2, 4, 7, 6)
lenny_rating <- c(6, 5, 4, 9, 8, 7, 3, 2, 1)
stewie_rating <- c(1, 9, 5, 6, 8, 7, 2, 3, 4)
#  Lab step #9: Pennys and Lennys rank of Episode IV
PennyIV <- penny_rating[4]
LennyIV <- lenny_rating[4]
#  Lab step #10: Concatenate all ranking sets
all_rating <- cbind(self_rating, penny_rating, lenny_rating,stewie_rating)
clear()
clear
#  Lab step #10: Comparison of PennyIV, penny_rating, and all_rating
str(PennyIV)
str(penny_rating)
str(all_rating)
View(all_rating)
#  Lab step #12: Creating a data frame of the rankings
ranking_data <- data.frame(self_rating, penny_rating, lenny_rating, stewie_rating)
ranking_data_mat <- as.data.frame(all_rating)
#  Lab step #12: Creating a data frame of the rankings
ranking_data_vec <- data.frame(self_rating, penny_rating, lenny_rating, stewie_rating)
ranking_data_mat <- as.data.frame(all_rating)
dim(all_rating)
dim(ranking_data_mat)
# Both objects have the same dimensions
str(all_rating)
str(ranking_data_mat)
View(all_rating)
View(ranking_data_mat)
typeof(all_rating)
typeof(ranking_data_mat)
# Lab step #14: Vector of strings for naming the episodes
epi_nam <- c("I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX")
help("row_names"")
"""
help("row_names")
help("row names")
help("row.names")
# Lab step #15: Naming the rows for the objects of step #10 and #12:
row.names(all_rating) <- epi_nam
row.names(ranking_data_mat) <- epi_nam
View(all_rating)
View(ranking_data_mat)
# Lab step #16: Accessing third row of matrix from step 10
all_rating[3,]
# Lab step #17: Accessing fourth column of data.frame
ranking_data_mat[,4]
# Lab step #18: Accessing own ranking for Episode V
ranking_data_mat[5,1]
all_rating[5,1]
# Lab step #19: Pennys ranking for Episode 2
ranking_data_mat[2,2]
all_rating[2,2]
# Lab step #20: Pennys ranking for Episode 2
ranking_data_mat[4:6,]
all_rating[4:6,]
ranking_data_mat[c(2,5,7),]
ranking_data_mat[c(4,6),c(2,4)]
all_rating[c(4,6),c(2,4)]
# Lab step #23: Switching Lennys ranking for Episode II and V
temp <- ranking_data_mat[2,3]
ranking_data_mat[2,3] <- ranking_data_mat[5,3]
ranking_data_mat[5,3] <- temp
View(ranking_data_mat)
# Lab step #24: Access using row and column names
all_rating["III", "penny_rating"]
ranking_data_mat["III", "penny_rating"]
# Lab step #25: Undo step 23 using row and column names
temp <- ranking_data_mat["II","lenny_rating"]
ranking_data_mat["II","lenny_rating"] <- ranking_data_mat["V","lenny_rating"]
ranking_data_mat["V","lenny_rating"] <- temp
View(ranking_data_mat)
# Lab step #26: Re-Undo step 25 using the $ operator
temp <- ranking_data_mat$lenny_rating[2]
ranking_data_mat$lenny_rating[2] <- ranking_data_mat$lenny_rating[5]
ranking_data_mat$lenny_rating[5] <- temp
View(ranking_data_mat)
for (funnyindex in seq(1,5)){
print("Hi")
}
for (funnyindex in rep('hi',5)){
print(funnyindex)
}
for (funnyindex in c(1,5)){
print(funnyindex)
}
for (funnyindex in rep('hi',5)){
print(funnyindex)
}
for (funnyindex in seq(1,5)){
print(funnyindex)
}
x = 42
threshold = 5
if(x > threshold){
print(x + "is bigger than 5")
}else{
print(x + "is smaller than 5")
}
x = 42
threshold = 5
if(x > threshold){
print(toString(x) + "is bigger than 5")
}else{
print(toString(x) + "is smaller than 5")
}
#print(toString(x) + "is smaller than 5")
}
x =3
#print(toString(x) + "is smaller than 5")
}
threshold <- 5
if(x > threshold){
cat("Current working dir: ", x)
}else{
#print(toString(x) + "is smaller than 5")
}
# Lab step #1: First if-statement !
x <- 42
threshold <- 5
if(x > threshold){
cat("Current working dir: ", x)
}else{
print(toString(x) + "is smaller than 5")
}
# Lab step #1: First if-statement !
x <- 42
threshold <- 50
if(x > threshold){
cat("Current working dir: ", x)
}else{
print(toString(x) + "is smaller than 5")
}
# Lab step #1: First if-statement !
x <- 42
threshold <- 50
if(x > threshold){
cat("Current working dir: ", x)
}else{
print(x + "is smaller than 5")
}
# Lab step #1: First if-statement !
x <- 42
threshold <- 5
if(x > threshold){
sprintf("%s is bigger than %s", x, threshold)
}else{
sprintf("%s is smaller than %s", x, threshold)
}
# Lab step #1: First if-statement !
x <- 42
threshold <- 50
if(x > threshold){
sprintf("%s is bigger than %s", x, threshold)
}else{
sprintf("%s is smaller than %s", x, threshold)
}
ExampleData <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Labs/Lab05/ExampleData.csv", sep="")
View(ExampleData)
# Lab step #1: First if-statement !
x <- 42 # Number to check
threshold <- 5 # Chosen threshold
if(x > threshold){
sprintf("%s is bigger than %s", x, threshold)
}else{
sprintf("%s is smaller than or equal %s", x, threshold)
}
# Lab step #2: First if-statement !
# Set path to CompBio_on_git  directory
setwd("/Users/lukas/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/
Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Labs/Lab05")
# Import data set
ExampleData <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/
Spring 2021/Computational Biology/CompBioSandbox/
CompBio_on_git/Labs/Lab05/ExampleData.csv", sep="")
# Lab step #2: First if-statement !
# Set path to CompBio_on_git  directory
setwd("/Users/lukas/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/
Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Labs/Lab05")
# Lab step #2: First if-statement !
# Set path to CompBio_on_git  directory
setwd("/Users/lukas/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Labs/Lab05")
# Import data set
ExampleData <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Labs/Lab05/ExampleData.csv", sep="")
View(ExampleData)
# Change data set to vector
data <- ExampleData$x
# Part 2a): Getting rid of negativity
for(i in seq(1:length(data))){
if(data[i] < 0){
data[i] <- NA
}
}
view data
View(data)
data
# Part 2b): Getting rid of negativity
index <- is.na(data)
index
# Part 2b): Getting rid of negativity
index <- is.na(data)
data(index) <- NaN
# Part 2b): Getting rid of negativity
index <- is.na(data)
data[index] <- NaN
data
# Part 2c):
index <- which(is.nan(data))
index
# Part 2c): Back to zero
index <- which(is.nan(data))
data[index] <- 0
data
# Part 2b): Replacing NA with NaN
index <- is.na(data)
data[index] <- NaN
index
# Part 2c): Back to zero
index <- which(is.nan(data)) # Integer indexing
data[index] <- 0
# Part 2d): Number of elements between 50 & 100
length(which(data > 50 & data < 100))
len_in_range <- length(in_range)
in_range <- which(data > lower_tresh & data < upper_tresh)
# Part 2d): Number of elements in specified range
lower_tresh <- 50
upper_tresh <- 100
in_range <- which(data > lower_tresh & data < upper_tresh)
len_in_range <- length(in_range)
in_range
# Part 2e): Storing the in range values
FiftyToOneHundred <- data[in_range]
FiftyToOneHundred
length(FiftyToOneHundred)
# Part 2f): Storing the in range values
# Set path to own Labs and HW directory
setwd("/Users/lukas/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Labs/Lab05")
# Export data set
write.csv(x = FiftyToOneHundred, file = "FiftyToOneHundred.csv")
# Lab step #2: Working on some data
# Import data set
ExampleData <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Labs/Lab05/ExampleData.csv", sep="")
# Lab step #3: Going be to climate change !
# Import data set
data_CO2 <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Labs/Lab04/CO2_data_cut_paste.csv", sep="")
View(data_CO2)
CO2_data_cut_paste <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Labs/Lab04/CO2_data_cut_paste.csv")
View(CO2_data_cut_paste)
# Lab step #3: Going be to climate change !
# Import data set
CO2_data <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Labs/Lab04/CO2_data_cut_paste.csv")
View(CO2_data)
# Part 3a): Getting rid of negativity
first_non_zero_gas <- which(CO2_data$Gas != 0)
first_non_zero_gas
# Part 3a): Getting rid of negativity
first_non_zero_gas <- min(which(CO2_data$Gas != 0))
first_non_zero_gas
# Part 3b): Years with total emission between 200 and 300 million metric tons
lower_tresh <- 200
upper_tresh <- 300
temp <- which(CO2_data$Total > lower_tresh & CO2_data$Total < upper_tresh)
temp
# Part 3b): Years with total emission between 200 and 300 million metric tons
lower_tresh <- 200
upper_tresh <- 300
temp <- which(CO2_data$Total > lower_tresh & CO2_data$Total < upper_tresh)
years <- CO2_data$Total[temp]
years
# Part 3b): Years with total emission between 200 and 300 million metric tons
lower_tresh <- 200
upper_tresh <- 300
temp <- which(CO2_data$Total > lower_tresh & CO2_data$Total < upper_tresh)
years <- CO2_data$Year[temp]
years
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		# conversion constant of prey into predators
time <- seq(1:totalGenerations)
n <- rep(NA, length(time))
p <-rep(NA, length(time))
for (t in 2:length(time)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(n[t] < 0){
n[t] <- 0
}
}
for (t in 2:length(time)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
#if(n[t] < 0){
#  n[t] <- 0
# }
}
n
time <- seq(1:totalGenerations)
n <- c(initPrey, rep(NA, length(time) - 1))
p <- c(initPred, rep(NA, length(time) - 1))
n
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		# conversion constant of prey into predators
time <- seq(1:totalGenerations)
n <- c(initPrey, rep(NA, length(time) - 1))
p <- c(initPred, rep(NA, length(time) - 1))
for (t in 2:length(time)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(n[t] < 0){
n[t] <- 0
}
}
plot(time,n)
lines(time,p)
myResults <- c(time, n, p)
myResults
myResults <- cbind(time, n, p)
View(myResults)
