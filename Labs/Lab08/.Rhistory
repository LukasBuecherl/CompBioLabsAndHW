OwnAver(c(1, 2, 3, 4))
# Demonstration of usage:
OwnAver(c(5, 15, 10))
ExampleData <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Labs/Lab05/DataForLab07.csv", sep="")
ExampleData <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Labs/Lab07/DataForLab07.csv", sep="")
View(ExampleData)
OwnAver(ExampleData[[1]])
# Function definition:
squareDiff <- function(x, y){
return( (x - y)^2 )
}
# Demonstration of usage:
squareDiff(3, 5)
squareDiff(c(2, 4, 6), 4)
###
#4b)
###
# Function definition:
OwnAver <- function(x){
return( sum(x) / length(x) )
}
# Demonstration of usage:
OwnAver(c(5, 15, 10))
ExampleData <- read.csv("~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Labs/Lab07/DataForLab07.csv", sep="")
OwnAver(ExampleData[[1]])
# Function definition:
SumSquares <- function(x){
mean <- OwnAver(x)
return(sum(squareDiff(x, mean)))
}
SumSquares(ExampleData[[1]])
# Demonstration of usage:
triangleArea(10, 9)
# Function definition:
triangleArea <- function(base, height) {
# Function to calculate the area of a triangle
# Inputs: lenght of the base and the height of the triangle
# Output: are of the triangle
return(0.5 * base * height)
}
# Demonstration of usage:
triangleArea(10, 9)
# Function definition:
OwnAbs <- function(value) {
# Function to calculate the absolute value
# Input: scalar or vector
# Output: absolute value of the input
# Initialize storage variable
abs_value <- 0
for (element in 1:length(value)) {
# square and sum each element
abs_value <- abs_value + (value[element]) ^ 2
}
# return the square root
return(sqrt(abs_value))
}
# Demonstration of usage:
# Test 1:
Own_Abs(5)
# Function definition:
OwnAbs <- function(value) {
# Function to calculate the absolute value
# Input: scalar or vector
# Output: absolute value of the input
# Initialize storage variable
abs_value <- 0
for (element in 1:length(value)) {
# square and sum each element
abs_value <- abs_value + (value[element]) ^ 2
}
# return the square root
return(sqrt(abs_value))
}
# Demonstration of usage:
# Test 1:
OwnAbs(5)
# Test 2:
OwnAbs(-2.3)
# Test 3:
OwnAbs(c(1.1, 2, 0,-4.3, 9,-12))
# Function definition:
fibonacciSeq <- function(n, start) {
# Function to calculate the fibonacci sequence
# Inputs:
# n: number of returned elements of fibonacci sequence
# start: defines if sequence starts with 0 or 1
# Output: Vector of fibonacci sequence
# Check if if length is 1 or 2 and return defined values for these special
# cases
if (n == 1) {
return(start)
} else if (n == 2) {
return(start + 1)
}
# Check if inputs are integers
if (n != round(n) | start != round(start)) {
return(print("Error: Inputs are not integers"))
}
# Check if number of elements to return is larger than 0
if (n <= 0) {
return(print("Error: Length of sequence is less or equal to 0"))
}
# Check if start value is either 0 or 1 as required
if (start < 0 | start >= 3) {
return(print("Error: start has to be 0 or 1"))
}
# Pre allocate result vector
fib <- rep(NA, n)
# Set first to elements
fib[1] <- start
fib[2] <- 1
# Calculate rest of the sequence
for (index in 3:n) {
fib[index] <- fib[index - 2] + fib[index - 1]
}
# Return the sequence
return(fib)
}
# Demonstration of usage:
fibonacciSeq(5, 0)
fibonacciSeq(5, 1)
fibonacciSeq(2.3, 1)
fibonacciSeq(-4, 1)
# Function definition:
squareDiff <- function(x, y) {
return((x - y) ^ 2)
}
# Function definition:
fibonacciSeq <- function(n, start) {
# Function to calculate the fibonacci sequence
# Inputs:
# n: number of returned elements of fibonacci sequence
# start: defines if sequence starts with 0 or 1
# Output: Vector of fibonacci sequence
# Check if if length is 1 or 2 and return defined values for these special
# cases
if (n == 1) {
return(start)
} else if (n == 2) {
return(start + 1)
}
# Check if inputs are integers
if (n != round(n) | start != round(start)) {
return(print("Error: Inputs are not integers"))
}
# Check if number of elements to return is larger than 0
if (n <= 0) {
return(print("Error: Length of sequence is less or equal to 0"))
}
# Check if start value is either 0 or 1 as required
if (start < 0 | start >= 3) {
return("Error: start has to be 0 or 1")
}
# Pre allocate result vector
fib <- rep(NA, n)
# Set first to elements
fib[1] <- start
fib[2] <- 1
# Calculate rest of the sequence
for (index in 3:n) {
fib[index] <- fib[index - 2] + fib[index - 1]
}
# Return the sequence
return(fib)
}
# Demonstration of usage:
fibonacciSeq(5, 0)
fibonacciSeq(5, 1)
fibonacciSeq(2.3, 1)
fibonacciSeq(-4, 1)
fibonacciSeq(-4, 1)
fibonacciSeq(5, 4)
# Check if inputs are integers
if (n != round(n) | start != round(start)) {
return("Error: Inputs are not integers")
}
# Function definition:
fibonacciSeq <- function(n, start) {
# Function to calculate the fibonacci sequence
# Inputs:
# n: number of returned elements of fibonacci sequence
# start: defines if sequence starts with 0 or 1
# Output: Vector of fibonacci sequence
# Check if if length is 1 or 2 and return defined values for these special
# cases
if (n == 1) {
return(start)
} else if (n == 2) {
return(start + 1)
}
# Check if inputs are integers
if (n != round(n) | start != round(start)) {
return("Error: Inputs are not integers")
}
# Check if number of elements to return is larger than 0
if (n <= 0) {
return("Error: Length of sequence is less or equal to 0")
}
# Check if start value is either 0 or 1 as required
if (start < 0 | start >= 3) {
return("Error: start has to be 0 or 1")
}
# Pre allocate result vector
fib <- rep(NA, n)
# Set first to elements
fib[1] <- start
fib[2] <- 1
# Calculate rest of the sequence
for (index in 3:n) {
fib[index] <- fib[index - 2] + fib[index - 1]
}
# Return the sequence
return(fib)
}
# Demonstration of usage:
fibonacciSeq(5, 0)
fibonacciSeq(5, 1)
fibonacciSeq(2.3, 1)
fibonacciSeq(-4, 1)
fibonacciSeq(5, 4)
# Function definition:
squareDiff <- function(x, y) {
# Function to calculate the squared difference of two values
return((x - y) ^ 2)
}
fibonacciSeq(20, 1)
length(fibonacciSeq(20, 1))
# Function definition:
triangleArea <- function(base, height) {
# Function to calculate the area of a triangle
# Inputs: length of the base and the height of the triangle
# Output: are of the triangle
return(0.5 * base * height)
}
# Demonstration of usage:
triangleArea(10, 9)
x = 1
which(x > 0)
# Function definition:
myAbs <- function(value) {
# Function to calculate the absolute value
# Input: scalar or vector
# Output: absolute value of the input
# Get index of all negativ elements
index <- which(value < 0)
# Multiply negative elements with -1
value <- value[index] * -1
# Return the absolute value
return(value)
}
# Demonstration of usage:
myAbs(5)
myAbs(-2.3)
myAbs(c(1.1, 2, 0,-4.3, 9,-12))
# Function definition:
myAbs <- function(value) {
# Function to calculate the absolute value
# Input: scalar or vector
# Output: absolute value of the input
# Get index of all negativ elements
index <- which(value < 0)
# Multiply negative elements with -1
value[index] <- value[index] * -1
# Return the absolute value
return(value)
}
# Demonstration of usage:
myAbs(5)
myAbs(-2.3)
myAbs(c(1.1, 2, 0,-4.3, 9,-12))
# Function definition:
fibonacciSeq <- function(n, start) {
# Function to calculate the fibonacci sequence
# Inputs:
# n: number of returned elements of fibonacci sequence
# start: defines if sequence starts with 0 or 1
# Output: Vector of fibonacci sequence
# Check if if length is 1 or 2 and return defined values for these special
# cases
if (n == 1) {
return(start)
} else if (n == 2) {
return(start + 1)
}
# Check if inputs are integers
if (n != round(n) | start != round(start)) {
return("Error: Inputs are not integers")
}
# Check if number of elements to return is larger than 0
if (n <= 0) {
return("Error: Length of sequence is less or equal to 0")
}
# Check if start value is either 0 or 1 as required
if (start < 0 | start >= 3) {
return("Error: start has to be 0 or 1")
}
# Pre allocate result vector
fib <- rep(NA, n)
# Set first to elements
fib[1] <- start
fib[2] <- 1
# Calculate rest of the sequence
for (index in 3:n) {
fib[index] <- fib[index - 2] + fib[index - 1]
}
# Return the sequence
return(fib)
}
# Demonstration of usage:
fibonacciSeq(5, 0)
fibonacciSeq(5, 1)
fibonacciSeq(20, 1)
fib[2] <- 1
fibonacciSeq(20, 1)
fibonacciSeq(2.3, 1)
fibonacciSeq(-4, 1)
fibonacciSeq(5, 4)
# Function definition:
squareDiff <- function(x, y) {
# Function to calculate the squared difference of two values
return((x - y) ^ 2)
}
# Demonstration of usage:
squareDiff(3, 5)
squareDiff(c(2, 4, 6), 4)
# Function definition:
OwnAver <- function(x) {
# Function to calculate the mean of an input vector
return(sum(x) / length(x))
}
# Demonstration of usage:
OwnAver(c(5, 15, 10))
ExampleData <-
read.csv(
"~/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Labs/Lab07/DataForLab07.csv",
sep = ""
)
OwnAver(ExampleData[[1]])
# Function definition:
SumSquares <- function(x) {
# Function to calculate the sum of squares of an input vector
mean <- OwnAver(x) # Calculate the mean
return(sum(squareDiff(x, mean)))
}
SumSquares(ExampleData[[1]])
install.packages("tidyverse") # do this in RStudio console
discreteTimeLogisticGrowthEquation <- function(r, K, generations, initPop){
# Function to calculate the discrete-time logistic growth model
# Inputs:
# r: Intrinsic growth rate of the population
# K: Environmental carrying capacity for the population
# generations: Number of generations to be calculated
# initPop: Initial abundance of the first generation
# Output:
# Plot of abundance over time
time <- 1:generations # Timeframe
n <- rep(NA, generations) # Pre-allocate
n[1] <- initPop # Abundance of the population first generation
for(t in 2:generations){
n[t] = n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
plot(time,n, xlab = "Timepoints", ylab = "Abundance", main = "Abundance Over Time")
}
K <- 10000 #  Environmental carrying capacity for the population
r <- 0.8 #  Intrinsic growth rate of the population
generations <- 20
initPop <- 2500
discreteTimeLogisticGrowthEquation(r, K, generation, initPop)
discreteTimeLogisticGrowthEquation <- function(r, K, generations, initPop){
# Function to calculate the discrete-time logistic growth model
# Inputs:
# r: Intrinsic growth rate of the population
# K: Environmental carrying capacity for the population
# generations: Number of generations to be calculated
# initPop: Initial abundance of the first generation
# Output:
# Plot of abundance over time
time <- 1:generations # Timeframe
n <- rep(NA, generations) # Pre-allocate
n[1] <- initPop # Abundance of the population first generation
for(t in 2:generations){
n[t] = n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
plot(time,n, xlab = "Timepoints", ylab = "Abundance", main = "Abundance Over Time")
}
K <- 10000 #  Environmental carrying capacity for the population
r <- 0.8 #  Intrinsic growth rate of the population
generations <- 20
initPop <- 2500
discreteTimeLogisticGrowthEquation(r, K, generations, initPop)
discreteTimeLogisticGrowthEquation <- function(r, K, generations, initPop){
# Function to calculate the discrete-time logistic growth model
# Inputs:
# r: Intrinsic growth rate of the population
# K: Environmental carrying capacity for the population
# generations: Number of generations to be calculated
# initPop: Initial abundance of the first generation
# Output:
# Plot of abundance over time
time <- 1:generations # Timeframe
n <- rep(NA, generations) # Pre-allocate
n[1] <- initPop # Abundance of the population first generation
for(t in 2:generations){
n[t] = n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
plot(time,n, xlab = "Generations", ylab = "Abundance", main = "Abundance Over Time")
}
K <- 10000 #  Environmental carrying capacity for the population
r <- 0.8 #  Intrinsic growth rate of the population
generations <- 20
initPop <- 2500
discreteTimeLogisticGrowthEquation(r, K, generations, initPop)
K <- 10000 #  Environmental carrying capacity for the population
r <- 0.8 #  Intrinsic growth rate of the population
generations <- 20
initPop <- 200
discreteTimeLogisticGrowthEquation(r, K, generations, initPop)
time <- 1:generations # Timeframe
discreteTimeLogisticGrowthEquation <- function(r, K, generations, initPop){
# Function to calculate the discrete-time logistic growth model
# Inputs:
# r: Intrinsic growth rate of the population
# K: Environmental carrying capacity for the population
# generations: Number of generations to be calculated
# initPop: Initial abundance of the first generation
# Output:
# Plot of abundance over time
time <- 1:generations # Timeframe
n <- rep(NA, generations) # Pre-allocate
n[1] <- initPop # Abundance of the population first generation
for(t in 2:generations){
n[t] = n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
plot(time,n, xlab = "Generations", ylab = "Abundance", main = "Abundance Over Time")
result <- cbind(time, n)
colnames(result) <- c("generations", "abundance")
return(result)
}
K <- 10000 #  Environmental carrying capacity for the population
r <- 0.8 #  Intrinsic growth rate of the population
generations <- 20
initPop <- 200
discreteTimeLogisticGrowthEquation(r, K, generations, initPop)
# Define the funciton:
discreteTimeLogisticGrowthEquation <- function(r, K, generations, initPop){
# Function to calculate the discrete-time logistic growth model
# Inputs:
# r: Intrinsic growth rate of the population
# K: Environmental carrying capacity for the population
# generations: Number of generations to be calculated
# initPop: Initial abundance of the first generation
# Output:
# Plot of abundance over time
time <- 1:generations # Timeframe
n <- rep(NA, generations) # Pre-allocate
n[1] <- initPop # Abundance of the population first generation
for(t in 2:generations){
n[t] = n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
plot(time,n, xlab = "Generations", ylab = "Abundance", main = "Abundance Over Time")
result <- cbind(time, n)
colnames(result) <- c("generations", "abundance")
return(result)
}
# Test the function:
K <- 10000
r <- 0.8
generations <- 20
initPop <- 200
# Save the data
setwd("/Users/lukas/Library/Mobile Documents/com~apple~CloudDocs",
"/CU Boulder/Spring 2021/Computational Biology/CompBioSandbox",
"/CompBio_on_git/Labs/Lab08")
# Save the data
setwd("/Users/lukas/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Labs/Lab08")
write.csv(discreteTimeLogisticGrowthEquation(r, K, generations, initPop),"discreteTimeLogisticGrowth.csv")
# Save the data
setwd("/Users/lukas/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioSandbox/CompBio_on_git/Labs/Lab08")
write.csv(discreteTimeLogisticGrowthEquation(r, K, generations, initPop),"discreteTimeLogisticGrowth.csv")
# Save the data
setwd("/Users/lukas/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Labs/Lab08")
write.csv(discreteTimeLogisticGrowthEquation(r, K, generations, initPop),"discreteTimeLogisticGrowth.csv")
# Set working directory
setwd("/Users/lukas/Library/Mobile Documents/com~apple~CloudDocs/CU Boulder/Spring 2021/Computational Biology/CompBioLabsAndHW/Labs/Lab08")
# Define the funciton:
discreteTimeLogisticGrowthEquation <- function(r, K, generations, initPop){
# Function to calculate the discrete-time logistic growth model
# Inputs:
# r: Intrinsic growth rate of the population
# K: Environmental carrying capacity for the population
# generations: Number of generations to be calculated
# initPop: Initial abundance of the first generation
# Output:
# Plot of abundance over time
time <- 1:generations # Timeframe
n <- rep(NA, generations) # Pre-allocate
n[1] <- initPop # Abundance of the population first generation
for(t in 2:generations){
n[t] = n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
plot(time,n, xlab = "Generations", ylab = "Abundance", main = "Abundance Over Time")
result <- cbind(time, n)
colnames(result) <- c("generations", "abundance")
write.csv(result,"discreteTimeLogisticGrowth.csv")
}
# Test the function:
K <- 10000
r <- 0.8
generations <- 20
initPop <- 200
# Save the data
discreteTimeLogisticGrowthEquation(r, K, generations, initPop)
